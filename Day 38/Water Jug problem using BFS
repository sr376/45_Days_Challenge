You are given an m liter jug and a n liter jug. Both the jugs are initially empty. The jugs don’t have markings to allow measuring smaller quantities. You have to use the jugs to measure d liters of water where d is less than n. 

(X, Y) corresponds to a state where X refers to the amount of water in Jug1 and Y refers to the amount of water in Jug2 
Determine the path from e initial state (xi, yi) to the final state (xf, yf), where (xi, yi) is (0, 0) which indicates both Jugs are initially empty and (xf, yf) indicates a state which could be (0, d) or (d, 0).

The operations you can perform are: 

Empty a jug (X, 0)->(0, 0) Empty Jug 1.
Fill a Jug, (0, 0)->(X, 0) Fill Jug 1
Pour water from one jug to the other until one of the jugs is either empty or full, (X, Y) -> (X-d, Y+d)
Examples: 

Input : 4 3 2
Output : {( 0,0),(0,3),(3,0),(3,3),(4,2),(0,2)}
We have discussed the optimal solution in The Two Water Jug Puzzle. In this post, a BFS based solution is discussed.

Here, we keep exploring all the different valid cases of the states of water in the jug simultaneously until and unless we reach the required target water.

As provided in the problem statement, at any given state we can do either of the following operations:

Fill a jug
Empty a jug
Transfer water from one jug to another until either of them gets completely filled or empty.
Examples:

      Input: X = 4, Y = 3, Z = 2
      Output: {(0, 0), (0, 3), (3, 0), (3, 3), (4, 2), (0, 2)}
Explanation: 
    Step 1:- First we will fill the 4 litre jug completely with water. 
    Step 2:- Then optimal approach would be to empty water from 4-litre jug into 3-litre  (leaving 1L water in 4L jug and 3L completely full). Hence we got 1L water.
    Step 3:- Now, Empty water from 3L.
    Step 4:- Pour the water from 4L jug into 3L jug Now 4L container is completely empty and 1L water in present in 3L litre jug.
    Step 5:- Fill the 4L jug with water completely again.
    Step 6:- On transferring  water from 4L jug to 3L jug, we will get 2L water in 4L jug which was our required quantity. 
       Input:  X = 3, Y = 5, Z = 4

       Output: 6

Explanation:
    Step 1:- First we will fill the 5-litres jug to its maximum capacity.
    Step 2:- Then optimal approach would be to transfer 3-litres from 5-litres jug to 3-litres jugs. 
    Step 3:- Now, Empty the 3-litres jug.
    Step 4:- Transfer 2L from 5L jug to 3-L jug.
    Step 5:- Now, Fill 5-litres jug to its maximum capacity.
    Step 6:- On Pouring water from 5L jug to 3L jug until it’s full we will get 4L water in 5-litre jug which was our required quantity. 


import java.util.*;

class Pair {
    int j1, j2;
    List<Pair> path;

    Pair(int j1, int j2) {
        this.j1 = j1;
        this.j2 = j2;
        path = new ArrayList<>();
    }

    Pair(int j1, int j2, List<Pair> _path) {
        this.j1 = j1;
        this.j2 = j2;
        path = new ArrayList<>();
        path.addAll(_path);
        path.add(new Pair(this.j1, this.j2));
    }
}

public class GFG {
    public static void main(String[] args) throws java.lang.Exception {
        int jug1 = 4;
        int jug2 = 3;
        int target = 2;

        getPathIfPossible(jug1, jug2, target);
    }

    private static void getPathIfPossible(int jug1, int jug2, int target) {
        boolean[][] visited = new boolean[jug1 + 1][jug2 + 1];
        Queue<Pair> queue = new LinkedList<>();
        Pair initialState = new Pair(0, 0);
        initialState.path.add(new Pair(0, 0));
        queue.offer(initialState);

        while (!queue.isEmpty()) {
            Pair curr = queue.poll();

            if (curr.j1 > jug1 || curr.j2 > jug2 || visited[curr.j1][curr.j2])
                continue;

            visited[curr.j1][curr.j2] = true;

            if (curr.j1 == target || curr.j2 == target) {
                if (curr.j1 == target) {
                    curr.path.add(new Pair(curr.j1, 0));
                } else {
                    curr.path.add(new Pair(0, curr.j2));
                }

                int n = curr.path.size();
                System.out.println("Path of states of jugs followed is :");
                for (int i = 0; i < n; i++)
                    System.out.println(curr.path.get(i).j1 + " , " + curr.path.get(i).j2);
                return;
            }

            queue.offer(new Pair(jug1, 0, curr.path));
            queue.offer(new Pair(0, jug2, curr.path));
            queue.offer(new Pair(jug1, curr.j2, curr.path));
            queue.offer(new Pair(curr.j1, jug2, curr.path));
            queue.offer(new Pair(0, curr.j2, curr.path));
            queue.offer(new Pair(curr.j1, 0, curr.path));

            int emptyJug = jug2 - curr.j2;
            int amountTransferred = Math.min(curr.j1, emptyJug);
            int j2 = curr.j2 + amountTransferred;
            int j1 = curr.j1 - amountTransferred;
            queue.offer(new Pair(j1, j2, curr.path));

            emptyJug = jug1 - curr.j1;
            amountTransferred = Math.min(curr.j2, emptyJug);
            j2 = curr.j2 - amountTransferred;
            j1 = curr.j1 + amountTransferred;
            queue.offer(new Pair(j1, j2, curr.path));
        }

        System.out.println("Not Possible to obtain target");
    }
}
