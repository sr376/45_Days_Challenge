class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {

        HashSet<Integer> visited = new HashSet<>();

        for (int i = 0; i < V; i++) {
            if (!visited.contains(i)) {

                if (findCycle(i, -1, adj, visited)) {
                    return true;
                }
            }
        }
        return false; 
    }

    public boolean findCycle(int v, int parent, ArrayList<ArrayList<Integer>> adj, HashSet<Integer> visited) {

        visited.add(v);

        for (int vertex : adj.get(v)) {

            if (!visited.contains(vertex)) {
                if (findCycle(vertex, v, adj, visited)) {
                    return true; 
                }
            }
            
            else if (vertex != parent) {
                return true;
            }
        }
        return false;
    }
}
