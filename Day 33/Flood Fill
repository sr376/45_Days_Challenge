
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int n = image.length;
        int m = image[0].length;
        boolean[][] vis = new boolean[n][m];
        int initialValue = image[sr][sc];

        if (initialValue == color) {
            return image;
        }

        int[] rowPossibility = {-1, 0, 0, 1}; 
        int[] colPossibility = {0, -1, 1, 0}; 

        dfs(image, vis, rowPossibility, colPossibility, sr, sc, color, initialValue, n, m);
        return image;
    }

    public void dfs(int[][] image, boolean[][] vis, int[] rowPossibility, int[] colPossibility, int sr, int sc, int color, int initialValue, int n, int m) {

        if (sr < 0 || sr >= n || sc < 0 || sc >= m || image[sr][sc] != initialValue || vis[sr][sc]) {
            return;
        }

        vis[sr][sc] = true;
        image[sr][sc] = color;

        for (int i = 0; i < 4; i++) {
            int newRow = sr + rowPossibility[i];
            int newCol = sc + colPossibility[i];
            dfs(image, vis, rowPossibility, colPossibility, newRow, newCol, color, initialValue, n, m);
        }
    }
}
