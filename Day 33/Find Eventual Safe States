

class Solution {
    public boolean dfs(int[][] graph, int node, boolean vis[],boolean[] pathVis){
        vis[node]=true;
        pathVis[node]=true;
        for(int i=0;i<graph[node].length;i++){
            int neigh=graph[node][i];
            if(vis[neigh]==false)
            {
                if( dfs(graph, neigh,vis,pathVis) ){
                    return true;
                }
            }
            else if(pathVis[neigh]){ 
                return true;
            }
        }
        pathVis[node]=false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> res=new ArrayList<>();
        boolean vis[]=new boolean[graph.length];
        boolean pathVis[]=new boolean[graph.length];
        for(int i=0;i<graph.length;i++){
            if(!vis[i])
            {
                dfs(graph, i, vis,pathVis);
            } 
        }
        for(int i=0;i<graph.length;i++)
        {
            if(!pathVis[i]) res.add(i);
        }

        return res;
    }
}
