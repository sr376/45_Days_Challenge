class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> res= new ArrayList<>();
        if(root==null) return res;
        HashMap<TreeNode, TreeNode> map = new HashMap<>();
        findParent(map, root);
        Set<TreeNode> visited = new HashSet<>();
        Queue<TreeNode> q = new LinkedList<>();

        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                TreeNode curr = q.poll();
                visited.add(curr);
                if(k==0){
                    res.add(curr.val);
                }
                if(map.containsKey(curr) && !visited.contains(map.get(curr))){
                    q.add(map.get(curr));
                }
                if(curr.left!=null && !visited.contains(curr.left)){
                    q.add(curr.left);
                }
                  if(curr.right!=null && !visited.contains(curr.right)){
                    q.add(curr.right);
                }
            }
            k--;
            if(k<0) break;
        }
        return res;

    }
    private void findParent(HashMap<TreeNode, TreeNode> map, TreeNode root){
        if(root==null) return;
        if(root.left!=null){
            map.put(root.left,root);
        }
        if(root.right!=null){
            map.put(root.right,root);
        }
        findParent(map,root.left);
        findParent(map, root.right);
        return ;
    }
}
