
We are given a bar of chocolate composed of m*n square pieces. One should break the chocolate into single squares. Parts of the chocolate may be broken along the vertical and horizontal lines as indicated by the broken lines in the picture.

A single break of a part of the chocolate along a chosen vertical or horizontal line divides that part into two smaller ones. Each break of a part of the chocolate is charged a cost expressed by a positive integer. This cost does not depend on the size of the part that is being broken but only depends on the line the break goes along. Let us denote the costs of breaking along consecutive vertical lines with x1, x2, ..., xm-1 and along horizontal lines with y1, y2, ..., yn-1.

The cost of breaking the whole bar into single squares is the sum of the successive breaks. One should compute the minimal cost of breaking the whole chocolate into single squares.


For example, if we break the chocolate presented in the picture first along the horizontal lines, and next each obtained part along vertical lines then the cost of that breaking will be y1+y2+y3+4*(x1+x2+x3+x4+x5).

Task
Write a program that for each test case:

Reads the numbers x1, x2, ..., xm-1 and y1, y2, ..., yn-1
Computes the minimal cost of breaking the whole chocolate into single squares, writes the result.
Input
One integer in the first line, stating the number of test cases, followed by a blank line. There will be not more than 20 tests.

For each test case, at the first line there are two positive integers m and n separated by a single space, 2 <= m,n <= 1000. In the successive m-1 lines there are numbers x1, x2, ..., xm-1, one per line, 1 <= xi <= 1000. In the successive n-1 lines there are numbers y1, y2, ..., yn-1, one per line, 1 <= yi <= 1000.

The test cases will be separated by a single blank line.

Output
For each test case : write one integer - the minimal cost of breaking the whole chocolate into single squares.

import java.util.*;

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt(); // Number of test cases
        sc.nextLine(); // Move to the next line after the number of test cases
        
        while (t-- > 0) {
            sc.nextLine(); // Consume the blank line between test cases
            
            // Read m and n
            int m = sc.nextInt();
            int n = sc.nextInt();
            
            // Read the vertical and horizontal cut costs
            int[] verticalCuts = new int[m - 1];
            int[] horizontalCuts = new int[n - 1];
            
            for (int i = 0; i < m - 1; i++) {
                verticalCuts[i] = sc.nextInt();
            }
            
            for (int i = 0; i < n - 1; i++) {
                horizontalCuts[i] = sc.nextInt();
            }
            
            // Sort the costs in descending order
            Arrays.sort(verticalCuts);
            Arrays.sort(horizontalCuts);
            
            int hPieces = 1;  // Horizontal pieces (initially 1)
            int vPieces = 1;  // Vertical pieces (initially 1)
            int i = m - 2;    // Pointer for vertical cuts
            int j = n - 2;    // Pointer for horizontal cuts
            long cost = 0;    // Total cost
            
            // Greedily pick the largest cut cost available
            while (i >= 0 && j >= 0) {
                if (verticalCuts[i] > horizontalCuts[j]) {
                    // Make a vertical cut
                    cost += (long) verticalCuts[i] * hPieces;
                    vPieces++;
                    i--;
                } else {
                    // Make a horizontal cut
                    cost += (long) horizontalCuts[j] * vPieces;
                    hPieces++;
                    j--;
                }
            }
            
            // If there are remaining vertical cuts
            while (i >= 0) {
                cost += (long) verticalCuts[i] * hPieces;
                i--;
            }
            
            // If there are remaining horizontal cuts
            while (j >= 0) {
                cost += (long) horizontalCuts[j] * vPieces;
                j--;
            }
            
            // Output the total minimal cost
            System.out.println(cost);
            
            if (t > 0) {
                System.out.println(); // Blank line between test case outputs
            }
        }
        
        sc.close();
    }
}
