class Solution {
    public int shortestBridge(int[][] grid) {
        Set<int[]> set1 = new HashSet<>();
        Set<int[]> set2 = new HashSet<>();
        int n = grid.length;
        int ans = Integer.MAX_VALUE;
        boolean[][] vis = new boolean[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    if(set1.isEmpty()){
                        dfs(i,j,set1,grid,vis);
                    }else{
                        dfs(i,j,set2,grid,vis);
                    }
                }
            }
        }
        for(int[] s1 : set1){
            for(int[] s2 : set2){
                ans = Math.min(ans,(Math.abs(s1[0]-s2[0])+Math.abs(s1[1]-s2[1]))-1);
            }
        }
        return ans;
    }
    public void dfs(int i, int j, Set<int[]> set, int[][] grid,boolean[][] vis){
        if(i>=grid.length || i<0 || j>=grid.length || j<0 || vis[i][j] || grid[i][j]!=1) return;
        set.add(new int[]{i,j});
        vis[i][j] = true;
        int[] drow = {1,0,-1,0};
        int[] dcol = {0,1,0,-1};
        for(int k=0;k<4;k++){
            dfs(i+drow[k],j+dcol[k],set,grid,vis);
        }
    }
}
