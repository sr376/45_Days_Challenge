class solve {

    public boolean graphColoring(boolean graph[][], int m, int n) {

        Map<Integer, ArrayList<Integer>> map = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        for(int i = 0; i < graph.length; i++){
            map.putIfAbsent(i, new ArrayList<>());
            for(int j = 0; j < graph[0].length; j++){
                if(graph[i][j]) map.get(i).add(j);
            }
        }
        int[] col = new int[n];
        return dfs(map, col, 0, m, n);
    }
    boolean dfs(Map<Integer, ArrayList<Integer>> map, int[] col, int node, int m, int n){
        if(node == n) return true;
        for(int color = 1; color <= m; color++){
            if(isSafe(map, col, node, color)){
                col[node] = color;
                if(dfs(map, col, node + 1, m, n))
                return true;
                col[node] = 0;
            }
        }
        return false;
    }
    boolean isSafe(Map<Integer, ArrayList<Integer>> map, int[] col, int node, int color){
        ArrayList<Integer> arr = map.get(node);
        for(int i : arr){
            if(col[i] == color) return false;
        }
        return true;
    }
}
