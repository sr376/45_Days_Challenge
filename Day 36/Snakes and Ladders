
class Solution {
    private int[] getCoordinates(int pos, int n) {
        int r = (pos - 1) / n;
        int c = (pos - 1) % n;
        if (r % 2 == 1) {
            c = n - 1 - c;
        }
        r = n - 1 - r;
        return new int[] {r, c};
    }

    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[] {1, 0});

        boolean[] vis = new boolean[n * n + 1];
        vis[1] = true;

        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int currNode = curr[0];
            int moves = curr[1];

            for (int k = 1; k <= 6; k++) {
                int next = currNode + k;


                int[] coords = getCoordinates(next, n);
                int i = coords[0];
                int j = coords[1];

                if (board[i][j] != -1) {
                    next = board[i][j];
                }

                if (next == n * n) return moves + 1;
                if (!vis[next]) {
                    vis[next] = true;
                    q.add(new int[] {next, moves + 1});
                }
            }
        }
        return -1;
    }
}
