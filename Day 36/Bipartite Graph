class Solution
{
    
    private boolean bfs(int node, int color[], ArrayList<ArrayList<Integer>>adj){
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        color[node] = 0;
        
        while(!q.isEmpty()){
            int curr = q.poll();
            
            for(int neighbour : adj.get(curr)){
                if(color[neighbour] == -1){
                    color[neighbour] = 1 - color[curr];
                    q.add(neighbour);
                }
                else if(color[neighbour] == color[curr]){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        int color[] = new int[V];
        for(int i=0; i<V; i++){
            color[i] = -1;
        }
        
        for(int i=0; i<V; i++){
            if(color[i] == -1){
                if(!bfs(i, color, adj)){
                    return false;
                }
            }
        }
        return true;
    } 
}
