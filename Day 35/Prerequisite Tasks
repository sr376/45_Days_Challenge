class Solution {
    public boolean isPossible(int N,int P, int[][] prerequisites)
    {
        List<List<Integer>>adj=new ArrayList<>();
         for (int i = 0; i < N; i++) {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<P;i++){
           int t1=prerequisites[i][0];
           int t2=prerequisites[i][1];
           adj.get(t1).add(t2);
        }
        int[]indeg=new int[N];
        for(int i=0;i<N;i++){
            for(int it:adj.get(i)){
                indeg[it]++;
            }
        }
        Queue<Integer>qu=new LinkedList();
        for(int i=0;i<N;i++){
            if(indeg[i]==0){
                qu.add(i);
            }
        }
        if(qu.isEmpty()) return false;
        
        int cnt=0;
        while(!qu.isEmpty()){
            int node=qu.peek();
            qu.remove();
            cnt++;
            for(int it:adj.get(node)){
                indeg[it]--;
                if(indeg[it]==0){
                    qu.add(it);
                }
            }
        }
        if(cnt==N) return true;
        return false;
        // Your Code goes here
    }
    
}
