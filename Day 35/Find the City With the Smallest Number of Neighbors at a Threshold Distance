class Pair{
    int weight,node;
    Pair(int _weight,int _node){
        this.weight=_weight;
        this.node=_node;
    }
}
class Solution {
    public int findTheCity(int n, int[][] edges, int distanceThreshold) {
        int r=edges.length;
        int c=edges[0].length;
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(new Pair(edge[2], edge[1]));
            adj.get(edge[1]).add(new Pair(edge[2], edge[0]));
        }

        int val=-1;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            PriorityQueue<Pair> pq=new PriorityQueue<>((x,y)-> x.weight-y.weight);
            int [] distance=new int[n];
            Arrays.fill(distance,Integer.MAX_VALUE);
            distance[i] = 0;
            pq.add(new Pair(0,i));
            while(!pq.isEmpty()){
                int weigh=pq.peek().weight;
                int node=pq.peek().node;
                pq.poll();
                if(weigh>distanceThreshold) break;
                for(Pair neighbour:adj.get(node)){
                    int edge = neighbour.weight;
                    int adjnode = neighbour.node;
                    if(edge+weigh<distance[adjnode]){
                        distance[adjnode]=edge+weigh;
                        pq.add(new Pair(distance[adjnode],adjnode));
                    }
                }
            }
            int count=0;
            
            for (int d : distance) {
                if (d <= distanceThreshold) count++;
            }

            if (count <= min) {
                min = count;
                val = i;
            }
        }
            return val;

    }
}
