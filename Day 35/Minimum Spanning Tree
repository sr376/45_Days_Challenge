class Pair
{
    int val;
    int distance;
    
    Pair(int val, int distance)
    {
        this.val = val;
        this.distance = distance;
    }
}

class Solution {
    static int spanningTree(int V, int E, List<List<int[]>> edges)
    {
        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.distance - y.distance);
        pq.add(new Pair(0, 0));
        boolean[] vis = new boolean[V];
        int sum = 0;
        while(!pq.isEmpty())
        {
            var node = pq.remove();
            int val = node.val, distance = node.distance;
            if(vis[val]) continue;
            vis[val] = true;
            sum += distance;
            for(var it : edges.get(val))
            {
                if(!vis[it[0]])
                {
                    pq.add(new Pair(it[0], it[1]));
                }
            }
        }
        return sum;
    }
}
